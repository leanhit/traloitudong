// src/main/java/com/chatbot/chatHub/facebook/autoConnect/service/FbAutoConnectService.java

package com.chatbot.chatHub.facebook.autoConnect.service;

import com.chatbot.chatHub.facebook.connection.model.FacebookConnection;
import com.chatbot.chatHub.facebook.connection.repository.FacebookConnectionRepository;
import com.chatbot.chatHub.facebook.webhook.service.FacebookApiGraphService;
import com.chatbot.chatHub.facebook.autoConnect.dto.AutoConnectResponse; 
import com.chatbot.chatHub.facebook.autoConnect.dto.ConnectionError; 
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class FbAutoConnectService {

    private final FacebookConnectionRepository connectionRepository;
    private final FacebookApiGraphService facebookApiGraphService;

    public FbAutoConnectService(FacebookConnectionRepository connectionRepository,
                                FacebookApiGraphService facebookApiGraphService) {
        this.connectionRepository = connectionRepository;
        this.facebookApiGraphService = facebookApiGraphService;
    }

    /**
     * Auto connect t·∫•t c·∫£ fanpage c·ªßa user
     *
     * @param webUserId       web userId t·ª´ auth token
     * @param botId           botId
     * @param userAccessToken Facebook user access token
     * @return AutoConnectResponse ƒë·ªëi t∆∞·ª£ng ch·ª©a k·∫øt qu·∫£ chi ti·∫øt
     */
    public AutoConnectResponse autoConnect(String webUserId, String botId, String userAccessToken) {
        System.out.println("üîπ B·∫Øt ƒë·∫ßu auto connect fanpage cho webUserId=" + webUserId);

        List<String> connectedPages = new ArrayList<>();
        List<String> reactivatedPages = new ArrayList<>();
        List<String> inactivePages = new ArrayList<>();
        List<ConnectionError> errors = new ArrayList<>();

        String fbUserId = facebookApiGraphService.getUserIdFromToken(userAccessToken);

        // 1Ô∏è‚É£ L·∫•y danh s√°ch page t·ª´ FB (pageId, pageAccessToken, fbUserId)
        List<Map<String, Object>> fbPages = facebookApiGraphService.getUserPages(userAccessToken);
        if (fbPages.isEmpty()) {
            System.out.println("‚ö†Ô∏è User kh√¥ng c√≥ fanpage ho·∫∑c l·∫•y page th·∫•t b·∫°i");
            return new AutoConnectResponse(
                false, 
                "User kh√¥ng c√≥ fanpage n√†o.", 
                Collections.emptyList(), 
                Collections.emptyList(), 
                Collections.emptyList(), 
                Collections.emptyList()
            );
        }
        Set<String> fbPageIds = fbPages.stream()
            .map(p -> (String) p.get("id"))
            .collect(Collectors.toSet());

        // 2Ô∏è‚É£ L·∫•y connection hi·ªán t·∫°i c·ªßa web user
        List<FacebookConnection> existingConnections = connectionRepository.findByOwnerId(webUserId);
        Map<String, FacebookConnection> pageIdToConnection = existingConnections.stream()
            .collect(Collectors.toMap(FacebookConnection::getPageId, c -> c));

        List<FacebookConnection> connectionsToSave = new ArrayList<>();

        // 3Ô∏è‚É£ X·ª≠ l√Ω FB pages: k·∫øt n·ªëi m·ªõi ho·∫∑c k√≠ch ho·∫°t l·∫°i
        for (Map<String, Object> page : fbPages) {
            String pageId = (String) page.get("id");
            String pageName = (String) page.get("name");
            String pageToken = (String) page.get("access_token");

            if (pageIdToConnection.containsKey(pageId)) {
                FacebookConnection conn = pageIdToConnection.get(pageId);
                
                // Lu√¥n c·∫≠p nh·∫≠t access token v√† bot name m·ªõi nh·∫•t
                conn.setPageAccessToken(pageToken);
                conn.setBotName(pageName);
                
                // N·∫øu k·∫øt n·ªëi ƒëang inactive, k√≠ch ho·∫°t l·∫°i
                if (!conn.isActive()) {
                    conn.setActive(true); 
                    conn.setEnabled(true); 
                    conn.setLastUpdatedAt(LocalDateTime.now());
                    connectionsToSave.add(conn);
                    reactivatedPages.add(pageName); 
                    System.out.println("‚ôªÔ∏è K√≠ch ho·∫°t l·∫°i trang: " + pageId + " (" + pageName + ")");
                } else {
                    // N·∫øu ƒë√£ active, c·∫≠p nh·∫≠t v√† th√™m v√†o danh s√°ch ƒë·ªÉ l∆∞u
                    conn.setLastUpdatedAt(LocalDateTime.now());
                    connectionsToSave.add(conn);
                    connectedPages.add(pageName);
                    System.out.println("‚û°Ô∏è Trang ƒë√£ c√≥ k·∫øt n·ªëi v√† active, ƒëang c·∫≠p nh·∫≠t: " + pageId + " (" + pageName + ")");
                }
            } else {
                // Trang m·ªõi ‚Üí t·∫°o k·∫øt n·ªëi m·ªõi
                FacebookConnection conn = new FacebookConnection();
                conn.setId(UUID.randomUUID());
                conn.setBotId(botId);
                conn.setBotName(pageName);
                conn.setOwnerId(webUserId);
                conn.setFbUserId(fbUserId);
                conn.setPageId(pageId);
                conn.setFanpageUrl("https://www.facebook.com/" + pageId);
                conn.setPageAccessToken(pageToken);
                conn.setEnabled(true);
                conn.setActive(true);
                conn.setCreatedAt(LocalDateTime.now());
                conn.setLastUpdatedAt(LocalDateTime.now());
                connectionsToSave.add(conn);
                connectedPages.add(pageName); 
                System.out.println("‚û°Ô∏è T·∫°o k·∫øt n·ªëi m·ªõi cho trang: " + pageId + " (" + pageName + ")");
            }
        }

        // 4Ô∏è‚É£ X·ª≠ l√Ω trang c√≥ k·∫øt n·ªëi nh∆∞ng kh√¥ng c√≤n trong FB
        // ‚úÖ ƒê√É S·ª¨A: l·ªçc c√°c k·∫øt n·ªëi theo fbUserId hi·ªán t·∫°i
        List<FacebookConnection> currentFbUserConnections = existingConnections.stream()
                .filter(conn -> conn.getFbUserId() != null && conn.getFbUserId().equals(fbUserId))
                .collect(Collectors.toList());

        for (FacebookConnection conn : currentFbUserConnections) {
            if (!fbPageIds.contains(conn.getPageId()) && conn.isActive()) {
                try {
                    facebookApiGraphService.unsubscribePageFromWebhook(conn.getPageId(), conn.getPageAccessToken());
                    inactivePages.add(conn.getBotName());
                    conn.setActive(false);
                    conn.setLastUpdatedAt(LocalDateTime.now());
                    connectionsToSave.add(conn);
                    System.out.println("‚ùå ƒê√°nh d·∫•u kh√¥ng ho·∫°t ƒë·ªông trang " + conn.getPageId() + " cho fbUserId=" + fbUserId);
                } catch (Exception e) {
                    errors.add(new ConnectionError(conn.getBotName(), "L·ªói khi h·ªßy ƒëƒÉng k√Ω webhook: " + e.getMessage()));
                    inactivePages.add(conn.getBotName());
                    conn.setActive(false);
                    conn.setLastUpdatedAt(LocalDateTime.now());
                    connectionsToSave.add(conn);
                    System.err.println("‚ùå L·ªói khi h·ªßy ƒëƒÉng k√Ω webhook cho trang " + conn.getPageId() + ": " + e.getMessage());
                }
            }
        }

        // 5Ô∏è‚É£ L∆∞u c√°c k·∫øt n·ªëi m·ªõi ho·∫∑c k√≠ch ho·∫°t l·∫°i
        if (!connectionsToSave.isEmpty()) {
            connectionRepository.saveAll(connectionsToSave);
            System.out.println("‚úÖ L∆∞u/k√≠ch ho·∫°t " + connectionsToSave.size() + " k·∫øt n·ªëi th√†nh c√¥ng");
        }

        // 6Ô∏è‚É£ ƒêƒÉng k√Ω webhook cho c√°c k·∫øt n·ªëi ƒëang ho·∫°t ƒë·ªông
        for (FacebookConnection conn : connectionsToSave) {
            try {
                if(conn.isActive()){
                    facebookApiGraphService.subscribePageToWebhook(conn.getPageId(), conn.getPageAccessToken());
                }
            } catch (Exception e) {
                errors.add(new ConnectionError(conn.getBotName(), "L·ªói khi ƒëƒÉng k√Ω webhook: " + e.getMessage()));
                System.err.println("‚ùå L·ªói khi ƒëƒÉng k√Ω webhook cho trang " + conn.getPageId() + ": " + e.getMessage());
            }
        }

        System.out.println("üîπ T·ª± ƒë·ªông k·∫øt n·ªëi ho√†n t·∫•t cho webUserId=" + webUserId);
        
        boolean isSuccess = errors.isEmpty();
        String message = isSuccess ? "T·∫•t c·∫£ k·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!" : "ƒê√£ x·ª≠ l√Ω xong, nh∆∞ng c√≥ l·ªói x·∫£y ra.";
        
        return new AutoConnectResponse(
            isSuccess, 
            message, 
            connectedPages, 
            reactivatedPages, 
            inactivePages, 
            errors
        );
    }
}